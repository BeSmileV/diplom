1) Титульник
	Здравствуйте, я студент группы ПВ-212, Бондаренко Сергей. Тема моей дипломной работы 
	- Разработка front-end Web-приложения – учебной среды с чатами и AI-анализом кода лабораторных работ

2) Цели и задачи
	Была поставлена цель: повысить эффективность и облегчить работы преподавателей и 
	обучения студентов через создание front-end части Web-приложения для управления 
	учебным процессом, общения и автоматической проверки заданий.
	Для достижения цели были поставлены слудующие задачи:
	  \item Провести анализ существующих образовательных решений.
	  \item Определить архитектуру и технологический стек.
	  \item Разработать пользовательский интерфейс.
	  \item Реализовать модули для управления учебными структурами, заданиями и системой общения.
	  \item Интегрировать модуль автоматической проверки решений с использованием ИИ.
	  \item Провести тестирование бизнес-логики приложения.

3) Анализ решений
	Среди существующих решений можно выделить GoogleClassroom, MS Teams, Moodle, COdeSignal, Codility. 
	Проблема данных решений в том, что они не содержат все сервиси для ораганизации учебного процесса.
	Поэтому приходится переключатся между разными приложениями.

4) Стек технологий
	Стек технологий Web-приложения состоит из фреймворк Next.js, библиотеки React 
	и языка программирования TypeScript вскупе с JavaScript

5) Архитектура приложения
	В качестве архитектуры было выбрано Feature Sliced Design, которая подрозумевает деление на слои,
	которые делятся на логические срезы, а срезы делятся на сегменты.
	Также использовался паттерн Contaioner/Presientational Components, 
	который предлагает разделять компонент на бизнес-логику и визуальные компоненты.

6) Аутентификация и авторизация
	При отправки пользователем данных аутентификации, делается запрос к Next.js модулю Auth.js,
	который делает запрос к Backend-у. Backend возвращает JWT, 
	а Auth.js кладет его в куки браузера пользователя. 	
	При истечение действия access_token клиентская часть делает запрос к Auth.js, 
	то в свою очередь делает запрос к Backend на refresh. После меняет jwt у пользвателя в куках.

7) Взаимодействие админа
	После регистрации админа, он может взаимодействовать с админ-панелью.
	В ней можно взаимодействовать с институтами, кафдрами, группамми и пользователями.
	Также там создаются приглашения для студентов и преподавателей.

8) Взаимодействие препода
	У преподавателя есть доступ к системе чатов и заданий. В чатах он может создавать личные и групповые чаты.
	В системе заданий - создавать задания и выставлять оценки.

9) Взаимодействие студента
	У студента есть доступ к темже системам, но в чатах они не могу создавать групповые чаты, 
	а в системе заданий могут только выполнять задания и смотреть результат оценки.

10) Создание задачи
	При создание задачи преподаватель может указать промт для анализа решения студента.

11) Отправка решения задания
	При решение задачи студентом, Backend автоматический запускает проверку задания ИИ.
	После проверки результат отображается у студента и преподавателя

12) Результат проверки задания ИИ
	Соответственно интефейс того, как это выглядит.

13) Взаимодействие с чатами
	При переходе на страницу чатов, автоматический открывается WebSocket для принятия событий. 
	При выборе определнного чата выполняется http запрос для получение существующих сообщейний.

14) Отправка и получение сообщений
	При отправки сообщений пользователем по WebSocket-у оно сразу же добавляется у уже отображенных,
	недожидаясь ответа от Backend, чтобы сделать взаимодействовать с интерфейсом более отзывчивым.
	При срабатывание события "Нового сообщений", клиент получает новое сообщение и оно отображается у него.

15) WebSocket и jwt
	Для авторизации при подключение к WebSocket-у отправляется в headers access_token, далее он проверяется
	и когда он истекет произовдится refresh токена и перподключение WebSocket-а.

16) Интерфейс чатов
	Так выглядит интерфейс чатов.
	
15) Тесты
	Была протестирована бизнес-логика как в самом Web-приложение, так и в собственной библиотек,
	их результаты представлены на слайде.
	
15) Заключение
	В ходе выполнения выпускной квалификационной работе были успешно решены все поставленны задачи.
	Результатом работы является Web-приложение, которое предоставляет учебную среду с возможностью общения
	и системой заданий, которая поддерживает автоматическую проверку решений при помоще ИИ.
		